// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt @map("updatedAt")
  email          String    @unique
  name           String?
  role           Role      @default(USER)
  isActive       Boolean   @default(true)
  birthDate      DateTime?
  bio            String?   @db.Text
  avatarUrl      String?
  username       String?   @unique
  website        String?
  location       String?
  
  passwordHash   String
  resetToken      String?
  resetTokenExpires DateTime?
  resetCode       String?
  resetCodeExpires DateTime?
  refreshToken     String?
  refreshTokenExp  DateTime?

  posts          Post[]
  comments       Comment[]
  favoritesPosts UserFavoritePost[]
  
  // Novas relações para comentários
  commentLikes     CommentLike[]
  commentDislikes  CommentDislike[]
  commentShares    CommentShare[]
  commentReports   CommentReport[]
  
  // Relações com comunidades
  ownedCommunities     Community[] @relation("CommunityOwner")
  moderatedCommunities CommunityModerator[]
  joinedCommunities    CommunityMember[]
  communityPosts       CommunityPost[]
  communityBans        CommunityBan[]
}

model Community {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Informações básicas
  name            String   @unique @db.VarChar(50)  // nome único da comunidade
  slug            String   @unique @db.VarChar(50)  // URL slug (ex: tecnologia)
  prefix          String   @db.VarChar(10)          // prefixo (ex: r, c, etc)
  displayName     String   @db.VarChar(100)         // nome para exibição
  description     String?  @db.Text
  rules           String?  @db.Text
  
  // Configurações visuais
  avatarUrl       String?
  bannerUrl       String?
  primaryColor    String?  @db.VarChar(7)  // cor hexadecimal
  
  // Status e configurações
  isActive        Boolean  @default(true)
  isPrivate       Boolean  @default(false)
  requireApproval Boolean  @default(false)  // posts precisam de aprovação
  allowImages     Boolean  @default(true)
  allowVideos     Boolean  @default(true)
  allowPolls      Boolean  @default(true)
  
  // Contadores
  membersCount    Int      @default(0)
  postsCount      Int      @default(0)
  
  // Relações
  owner           User     @relation("CommunityOwner", fields: [ownerId], references: [id])
  ownerId         Int
  
  moderators      CommunityModerator[]
  members         CommunityMember[]
  posts           CommunityPost[]
  bans            CommunityBan[]
  
  @@index([slug])
  @@index([name])
  @@index([ownerId])
  @@index([createdAt])
}

model CommunityModerator {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  
  // Permissões
  canModerate Boolean  @default(true)  // pode moderar posts/comentários
  canBan      Boolean  @default(false) // pode banir usuários
  canInvite   Boolean  @default(false) // pode convidar moderadores
  canEdit     Boolean  @default(false) // pode editar configurações da comunidade
  
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  
  @@unique([communityId, userId])
  @@index([communityId])
}

model CommunityMember {
  id          Int      @id @default(autoincrement())
  joinedAt    DateTime @default(now())
  
  // Status
  isActive    Boolean  @default(true)
  isMuted     Boolean  @default(false)
  mutedUntil  DateTime?
  
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  
  @@unique([communityId, userId])
  @@index([communityId])
  @@index([userId])
}

model CommunityPost {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Conteúdo
  title           String   @db.VarChar(300)
  content         String?  @db.Text
  type            PostType @default(TEXT)
  
  // Mídia
  imageUrl        String?
  videoUrl        String?
  linkUrl         String?
  linkTitle       String?
  linkDescription String?
  
  // Status
  isApproved      Boolean  @default(true)
  isActive        Boolean  @default(true)
  isPinned        Boolean  @default(false)
  isLocked        Boolean  @default(false)
  
  // Contadores
  upvotes         Int      @default(0)
  downvotes       Int      @default(0)
  commentsCount   Int      @default(0)
  sharesCount     Int      @default(0)
  
  // Relações
  community       Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId     Int
  author          User      @relation(fields: [authorId], references: [id])
  authorId        Int
  
  // Conectar com sistema existente de comentários
  post            Post?     @relation(fields: [postId], references: [id])
  postId          Int?
  
  @@index([communityId])
  @@index([authorId])
  @@index([createdAt])
  @@index([upvotes])
}

model CommunityBan {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  
  reason      String   @db.Text
  isPermanent Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  
  // Quem aplicou o ban
  bannedBy    Int
  
  @@unique([communityId, userId])
  @@index([communityId])
  @@index([userId])
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
  LINK
  POLL
}

model Post {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  published       Boolean    @default(false)
  title           String     @db.VarChar(255)
  slug            String     @unique
  content         String
  excerpt         String?    @db.VarChar(300)
  coverImageUrl   String?
  metaTitle       String?    @db.VarChar(70)
  metaDescription String?    @db.VarChar(160)

  author          User?      @relation(fields: [authorId], references: [id])
  authorId        Int?

  categories      Category[] @relation("PostCategories")
  tags            Tag[]      @relation("PostTags")
  comments        Comment[]
  favoritedBy     UserFavoritePost[]
  
  // Relação com posts da comunidade
  communityPosts  CommunityPost[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.Text
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  
  // Status do comentário
  isActive  Boolean  @default(true)
  isApproved Boolean @default(true)
  
  // Relações básicas
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  
  // Sistema de comentários hierárquicos (respostas)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  Int?
  replies   Comment[] @relation("CommentReplies")
  
  // Contadores (desnormalizados para performance)
  likesCount    Int @default(0)
  dislikesCount Int @default(0)
  sharesCount   Int @default(0)
  repliesCount  Int @default(0)
  reportsCount  Int @default(0)
  
  // Relações com as novas funcionalidades
  likes     CommentLike[]
  dislikes  CommentDislike[]
  shares    CommentShare[]
  reports   CommentReport[]
  
  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  
  @@unique([userId, commentId])
  @@index([commentId])
}

model CommentDislike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  
  @@unique([userId, commentId])
  @@index([commentId])
}

model CommentShare {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  // Tipo de compartilhamento (social media, email, etc.)
  shareType ShareType @default(LINK)
  platform  String?   // Facebook, Twitter, WhatsApp, etc.
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  
  @@index([commentId])
  @@index([userId])
}

model CommentReport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  reason    ReportReason
  description String?  @db.Text
  status    ReportStatus @default(PENDING)
  
  // Quem reportou
  reporter  User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId Int
  
  // Comentário reportado
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  
  // Admin que processou o report
  reviewedBy Int?
  reviewedAt DateTime?
  reviewNotes String? @db.Text
  
  @@index([commentId])
  @@index([reporterId])
  @@index([status])
}

enum ShareType {
  LINK
  COPY
  EMAIL
  SOCIAL_MEDIA
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  INAPPROPRIATE_CONTENT
  VIOLENCE
  COPYRIGHT
  MISINFORMATION
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
  RESOLVED
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  slug  String @unique
  posts Post[] @relation("PostCategories")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  slug  String @unique
  posts Post[] @relation("PostTags")
}

model UserFavoritePost {
  id       Int  @id @default(autoincrement())
  userId   Int
  postId   Int
  createdAt DateTime @default(now())

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

enum Role {
  USER
  ADMIN
}